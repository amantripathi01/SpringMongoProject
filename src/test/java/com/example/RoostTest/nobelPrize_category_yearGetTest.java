// Test generated by RoostGPT for test restAssuredTesting using AI Type Open AI and AI Model gpt-4


// Test generated for /nobelPrize/{category}/{year}_get for http method type GET in rest-assured framework


// RoostTestHash=00eb351b13


package com.example.RoostTest;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class nobelPrize_category_yearGetTest {
  
    @Test  
    public void nobelPrize_category_year_get_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/example/RoostTest/nobelPrize_category_yearGetTest.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
  
                Response response = given()
				.pathParam("category", map.get("category") != null ? map.get("category") : "")
				.pathParam("year", map.get("year") != null ? map.get("year") : "")
                .when()
                .get("/nobelPrize/{category}/{year}")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: Successful call of the Nobel Prize giving the category and year");
    
              if (response.jsonPath().get("nobelPrize") != null) {    
              if (response.jsonPath().get("nobelPrize.awardYear") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.awardYear"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.category") != null) {    
              if (response.jsonPath().get("nobelPrize.category.en") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.category.en"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.category.se") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.category.se"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.category.no") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.category.no"), instanceOf(String.class));  
          }
  
          }
    
              if (response.jsonPath().get("nobelPrize.categoryFullName") != null) {    
              if (response.jsonPath().get("nobelPrize.categoryFullName.en") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.categoryFullName.en"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.categoryFullName.se") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.categoryFullName.se"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.categoryFullName.no") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.categoryFullName.no"), instanceOf(String.class));  
          }
  
          }
    
              if (response.jsonPath().get("nobelPrize.dateAwarded") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.dateAwarded"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.prizeAmount") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.prizeAmount"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.prizeAmountAdjusted") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.prizeAmountAdjusted"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.topMotivation") != null) {    
              if (response.jsonPath().get("nobelPrize.topMotivation.en") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.topMotivation.en"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.topMotivation.se") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.topMotivation.se"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.topMotivation.no") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.topMotivation.no"), instanceOf(String.class));  
          }
  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates") != null) {    
                for (int i = 0; i < response.jsonPath().getList("nobelPrize.laureates").size(); i++) {    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].id") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].id"), instanceOf(Integer.class));  
                double yourValue = response.jsonPath().getDouble("nobelPrize.laureates[`" + i + "`].id");
                assertThat(yourValue, greaterThanOrEqualTo(1.0));
  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].name") != null) {    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].name.en") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].name.en"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].name.se") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].name.se"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].name.no") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].name.no"), instanceOf(String.class));  
          }
  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].portion") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].portion"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("nobelPrize.laureates[`"+ i +"`].portion"), anyOf(equalTo("1"), equalTo("1/2"), equalTo("1/3"), equalTo("1/4")));
  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].sortOrder") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].sortOrder"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("nobelPrize.laureates[`"+ i +"`].sortOrder"), anyOf(equalTo("1"), equalTo("2"), equalTo("3")));
  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].motivation") != null) {    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].motivation.en") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].motivation.en"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].motivation.se") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].motivation.se"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].motivation.no") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].motivation.no"), instanceOf(String.class));  
          }
  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links") != null) {    
                for (int i1 = 0; i1 < response.jsonPath().getList("nobelPrize.laureates[`"+ i +"`].links").size(); i1++) {    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].rel") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].rel"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].href") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].href"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].action") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].action"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].types") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("nobelPrize.laureates[`"+ i +"`].links[`"+ i1 +"`].types"), instanceOf(String.class));  
          }
    
                  }  
                MatcherAssert.assertThat(response.jsonPath().getList("nobelPrize.laureates[`"+ i +"`].links"), instanceOf(List.class));
  
          }
    
                  }  
                MatcherAssert.assertThat(response.jsonPath().getList("nobelPrize.laureates"), instanceOf(List.class));
  
          }
  
          }
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.");
    
              if (response.jsonPath().get("code") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("message") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 404) {
					System.out.println("Description: Not Found. The requested resource could not be found but may be available again in the future.");
    
              if (response.jsonPath().get("code") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("message") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 422) {
					System.out.println("Description: Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.");
    
              if (response.jsonPath().get("code") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("message") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
				}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
