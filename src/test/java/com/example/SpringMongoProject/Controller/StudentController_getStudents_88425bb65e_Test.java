// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package com.example.SpringMongoProject.Controller;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mockito;

@ExtendWith(MockitoExtension.class)
public class StudentController_getStudents_88425bb65e_Test {

    @Mock
    private StudentServices studentServices;

    @InjectMocks
    private StudentController studentController;

    private Student student;

    @BeforeEach
    public void setup() {
        student = new Student();
        student.set_id("123");
        student.setStudentname("John Doe");
        student.setStudentaddress("123 Main St");
        student.setMobile("1234567890");
    }

    @Test
    public void testGetStudents_ValidId() {
        Mockito.when(studentServices.getStudentByID(Mockito.anyString())).thenReturn(student);

        Student result = studentController.getStudents("123");

        Assertions.assertNotNull(result, "Expected not null");
        Assertions.assertEquals("123", result.get_id(), "Expected id to match");
        Assertions.assertEquals("John Doe", result.getStudentname(), "Expected name to match");
        Assertions.assertEquals("123 Main St", result.getStudentaddress(), "Expected address to match");
        Assertions.assertEquals("1234567890", result.getMobile(), "Expected mobile to match");
    }

    @Test
    public void testGetStudents_InvalidId() {
        Mockito.when(studentServices.getStudentByID(Mockito.anyString())).thenReturn(null);

        Student result = studentController.getStudents("999");

        Assertions.assertNull(result, "Expected null for invalid id");
    }
}
