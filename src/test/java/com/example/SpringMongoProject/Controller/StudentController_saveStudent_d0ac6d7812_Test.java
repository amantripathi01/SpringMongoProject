/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Valid Student Data**

* **Description:** This test scenario verifies that the `saveStudent` method can successfully save a valid student object to the database.
* **Test Data:** A valid student object with all required fields populated.
* **Expected Result:** The method should return the ID of the saved student.

**Test Scenario 2: Missing Required Field**

* **Description:** This test scenario verifies that the `saveStudent` method throws an error when a required field is missing from the student object.
* **Test Data:** A student object with one or more required fields missing.
* **Expected Result:** The method should throw an error indicating that the required field is missing.

**Test Scenario 3: Duplicate Student ID**

* **Description:** This test scenario verifies that the `saveStudent` method can handle a situation where a student with the same ID already exists in the database.
* **Test Data:** A student object with an ID that already exists in the database.
* **Expected Result:** The method should throw an error indicating that the student ID already exists.

**Test Scenario 4: Null Student Object**

* **Description:** This test scenario verifies that the `saveStudent` method can handle a situation where a null student object is passed as an argument.
* **Test Data:** A null student object.
* **Expected Result:** The method should throw an error indicating that the student object cannot be null.

**Test Scenario 5: Empty Student Object**

* **Description:** This test scenario verifies that the `saveStudent` method can handle a situation where an empty student object is passed as an argument.
* **Test Data:** An empty student object (i.e., all fields are null or empty).
* **Expected Result:** The method should throw an error indicating that the student object cannot be empty.
*/
package com.example.SpringMongoProject.Controller;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
public class StudentController_saveStudent_d0ac6d7812_Test {

    @Autowired
    private StudentServices studentServices;

    @Test
    public void testValidStudentData() {
        // Given
        Student student = new Student();
        student.setName("John Doe");
        student.setAge(21);
        student.setGender("Male");
        student.set_id("1");

        // When
        String studentId = saveStudent(student);

        // Then
        assertNotNull(studentId);
        assertEquals("1", studentId);
    }

    @Test
    public void testMissingRequiredField() {
        // Given
        Student student = new Student();
        student.setName("John Doe");
        student.setGender("Male");

        // When
        Exception exception = assertThrows(Exception.class, () -> {
            saveStudent(student);
        });

        // Then
        assertEquals("Required field 'age' is missing", exception.getMessage());
    }

    @Test
    public void testDuplicateStudentID() {
        // Given
        Student student1 = new Student();
        student1.setName("John Doe");
        student1.setAge(21);
        student1.setGender("Male");
        student1.set_id("1");

        Student student2 = new Student();
        student2.setName("Jane Doe");
        student2.setAge(22);
        student2.setGender("Female");
        student2.set_id("1");

        // When
        saveStudent(student1);
        Exception exception = assertThrows(Exception.class, () -> {
            saveStudent(student2);
        });

        // Then
        assertEquals("Student with ID '1' already exists", exception.getMessage());
    }

    @Test
    public void testNullStudentObject() {
        // Given
        Student student = null;

        // When
        Exception exception = assertThrows(Exception.class, () -> {
            saveStudent(student);
        });

        // Then
        assertEquals("Student object cannot be null", exception.getMessage());
    }

    @Test
    public void testEmptyStudentObject() {
        // Given
        Student student = new Student();

        // When
        Exception exception = assertThrows(Exception.class, () -> {
            saveStudent(student);
        });

        // Then
        assertEquals("Student object cannot be empty", exception.getMessage());
    }

    private String saveStudent(Student students) {
        studentServices.saveorUpdate(students);
        return students.get_id();
    }
}
