// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package com.example.SpringMongoProject.Controller;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class StudentController_update_7f4e3cda7f_Test {

    @Mock
    private StudentServices studentServices;

    @InjectMocks
    private StudentController studentController;

    private Student student;

    @BeforeEach
    void setUp() {
        student = new Student();
        student.set_id("123");
        student.setStudentname("John Doe");
        student.setStudentaddress("123 Street");
        student.setMobile("1234567890");
    }

    @Test
    void testUpdateStudent() {
        when(studentServices.saveorUpdate(Mockito.any(Student.class))).thenReturn(student);

        Student updatedStudent = studentController.update(student, "123");

        verify(studentServices).saveorUpdate(student);
        assertEquals(updatedStudent.get_id(), "123");
        assertEquals(updatedStudent.getStudentname(), "John Doe");
        assertEquals(updatedStudent.getStudentaddress(), "123 Street");
        assertEquals(updatedStudent.getMobile(), "1234567890");
    }

    @Test
    void testUpdateStudentWithDifferentId() {
        when(studentServices.saveorUpdate(Mockito.any(Student.class))).thenReturn(student);

        Student updatedStudent = studentController.update(student, "456");

        verify(studentServices).saveorUpdate(student);
        assertEquals(updatedStudent.get_id(), "456");
        assertEquals(updatedStudent.getStudentname(), "John Doe");
        assertEquals(updatedStudent.getStudentaddress(), "123 Street");
        assertEquals(updatedStudent.getMobile(), "1234567890");
    }
}
