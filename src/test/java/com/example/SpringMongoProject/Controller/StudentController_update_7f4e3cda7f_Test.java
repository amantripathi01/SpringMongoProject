/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Update an existing student**

* **Preconditions:**
    * A student with the given `_id` exists in the database.
* **Test Steps:**
    1. Send a PUT request to the `/students/{id}` endpoint with the updated student information in the request body.
    2. Verify that the student is updated in the database.
* **Expected Result:**
    * The student is updated successfully and the updated student is returned in the response body.

**Test Scenario 2: Update a non-existing student**

* **Preconditions:**
    * A student with the given `_id` does not exist in the database.
* **Test Steps:**
    1. Send a PUT request to the `/students/{id}` endpoint with the updated student information in the request body.
    2. Verify that the student is not updated in the database.
* **Expected Result:**
    * The student is not updated and an appropriate error message is returned in the response body.

**Test Scenario 3: Update a student with invalid input**

* **Preconditions:**
    * A student with the given `_id` exists in the database.
* **Test Steps:**
    1. Send a PUT request to the `/students/{id}` endpoint with invalid student information in the request body (e.g., missing required fields, invalid data types, etc.).
    2. Verify that the student is not updated in the database.
* **Expected Result:**
    * The student is not updated and an appropriate error message is returned in the response body.
*/
package com.example.SpringMongoProject.Controller;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@SpringBootTest
@AutoConfigureMockMvc
public class StudentController_update_7f4e3cda7f_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private StudentServices studentServices;

    @Test
    public void testUpdateExistingStudent() throws Exception {
        // Preconditions:
        // A student with the given _id exists in the database.

        // Test Steps:
        // 1. Send a PUT request to the /students/{id} endpoint with the updated student information in the request body.
        Student student = new Student();
        student.setName("John Doe");
        student.setAge(21);
        mockMvc.perform(MockMvcRequestBuilders.put("/students/1")
                .contentType("application/json")
                .content("{\"name\":\"John Doe\",\"age\":21}"))

                // Verify that the student is updated in the database.
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("{\"name\":\"John Doe\",\"age\":21}"));

        // Expected Result:
        // The student is updated successfully and the updated student is returned in the response body.
        verify(studentServices).saveorUpdate(student);
    }

    @Test
    public void testUpdateNonExistingStudent() throws Exception {
        // Preconditions:
        // A student with the given _id does not exist in the database.

        // Test Steps:
        // 1. Send a PUT request to the /students/{id} endpoint with the updated student information in the request body.
        Student student = new Student();
        student.setName("John Doe");
        student.setAge(21);
        mockMvc.perform(MockMvcRequestBuilders.put("/students/2")
                .contentType("application/json")
                .content("{\"name\":\"John Doe\",\"age\":21}"))

                // Verify that the student is not updated in the database.
                .andExpect(MockMvcResultMatchers.status().isNotFound());

        // Expected Result:
        // The student is not updated and an appropriate error message is returned in the response body.
        verify(studentServices, times(0)).saveorUpdate(student);
    }

    @Test
    public void testUpdateStudentWithInvalidInput() throws Exception {
        // Preconditions:
        // A student with the given _id exists in the database.

        // Test Steps:
        // 1. Send a PUT request to the /students/{id} endpoint with invalid student information in the request body (e.g., missing required fields, invalid data types, etc.).
        mockMvc.perform(MockMvcRequestBuilders.put("/students/1")
                .contentType("application/json")
                .content("{\"name\":\"John Doe\"}"))

                // Verify that the student is not updated in the database.
                .andExpect(MockMvcResultMatchers.status().isBadRequest());

        // Expected Result:
        // The student is not updated and an appropriate error message is returned in the response body.
        verify(studentServices, times(0)).saveorUpdate(any(Student.class));
    }
}
