// Test generated by RoostGPT for test gitlab using AI Type Open AI and AI Model gpt-4-1106-preview

package com.example.SpringMongoProject.Controller;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(MockitoExtension.class)
public class StudentController_update_7f4e3cda7f_Test {

    @Mock
    private StudentServices studentServices;

    @InjectMocks
    private StudentController studentController;

    private Student student;
    private final String studentId = "123"; // TODO: Replace with actual student id if necessary

    @BeforeEach
    public void setUp() {
        student = new Student();
        student.set_id(studentId);
        student.setName("Test Student");
        student.setEmail("test@student.com");
    }

    @Test
    public void testUpdate_Successful() {
        // Arrange
        when(studentServices.saveorUpdate(student)).thenReturn(student);

        // Act
        Student updatedStudent = studentController.update(student, studentId);

        // Assert
        assertEquals(studentId, updatedStudent.get_id());
        assertEquals("Test Student", updatedStudent.getName());
        assertEquals("test@student.com", updatedStudent.getEmail());
        verify(studentServices).saveorUpdate(student);
    }

    @Test
    public void testUpdate_WithNonExistentId() {
        // Arrange
        String nonExistentId = "non-existent-id"; // TODO: Replace with actual non-existent id if necessary
        student.set_id(nonExistentId);
        when(studentServices.saveorUpdate(student)).thenReturn(student);

        // Act
        Student updatedStudent = studentController.update(student, nonExistentId);

        // Assert
        assertEquals(nonExistentId, updatedStudent.get_id());
        verify(studentServices).saveorUpdate(student);
    }
}
