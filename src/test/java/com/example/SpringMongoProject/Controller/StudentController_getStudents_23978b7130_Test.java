/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Verify if the function returns all the students present in the database.**

1. **Preconditions**:
    - There are students present in the database.

2. **Test Steps**:
    - Call the `getStudents` function.
    - Verify that the function returns all the students present in the database.

3. **Expected Outcome**:
    - The function should return all the students present in the database.

**Test Scenario 2: Verify if the function returns an empty list when there are no students in the database.**

1. **Preconditions**:
    - There are no students present in the database.

2. **Test Steps**:
    - Call the `getStudents` function.
    - Verify that the function returns an empty list.

3. **Expected Outcome**:
    - The function should return an empty list.

**Test Scenario 3: Verify if the function handles exceptions gracefully when there is an error in retrieving students from the database.**

1. **Preconditions**:
    - There is an error in retrieving students from the database.

2. **Test Steps**:
    - Call the `getStudents` function.
    - Verify that the function handles the exception gracefully and returns an appropriate error message.

3. **Expected Outcome**:
    - The function should handle the exception gracefully and return an appropriate error message.
*/
package com.example.SpringMongoProject.Controller;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@SpringBootTest
public class StudentController_getStudents_23978b7130_Test {

    @Autowired
    private StudentServices studentServices;

    @Test
    public void test_getStudents_withStudentsInDatabase() {
        // Preconditions
        List<Student> expectedStudents = new ArrayList<>();
        expectedStudents.add(new Student("1", "John Doe", "john.doe@example.com"));
        expectedStudents.add(new Student("2", "Jane Doe", "jane.doe@example.com"));
        when(studentServices.listAll()).thenReturn(expectedStudents);

        // Test Steps
        Iterable<Student> actualStudents = studentServices.listAll();

        // Expected Outcome
        assertEquals(expectedStudents, actualStudents);
    }

    @Test
    public void test_getStudents_withNoStudentsInDatabase() {
        // Preconditions
        List<Student> expectedStudents = new ArrayList<>();
        when(studentServices.listAll()).thenReturn(expectedStudents);

        // Test Steps
        Iterable<Student> actualStudents = studentServices.listAll();

        // Expected Outcome
        assertEquals(expectedStudents, actualStudents);
    }

    @Test
    public void test_getStudents_withErrorInRetrievingStudents() {
        // Preconditions
        when(studentServices.listAll()).thenThrow(new RuntimeException("Error in retrieving students"));

        // Test Steps
        Iterable<Student> actualStudents = studentServices.listAll();

        // Expected Outcome
        assertNotNull(actualStudents); // Verify that the function handles the exception gracefully and returns null
    }
}
