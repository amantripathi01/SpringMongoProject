/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Delete existing student**
- Given that a student with a valid _id exists in the database
- When the deleteStudent method is called with the valid _id
- Then the student should be deleted from the database

**Test Scenario 2: Delete non-existing student**
- Given that a student with the provided _id does not exist in the database
- When the deleteStudent method is called with the non-existing _id
- Then an appropriate error message should be returned indicating that the student does not exist

**Test Scenario 3: Delete student with empty _id**
- Given that an empty string is provided as the _id
- When the deleteStudent method is called with the empty _id
- Then an appropriate error message should be returned indicating that the _id cannot be empty

**Test Scenario 4: Delete student with null _id**
- Given that a null value is provided as the _id
- When the deleteStudent method is called with the null _id
- Then an appropriate error message should be returned indicating that the _id cannot be null
*/
package com.example.SpringMongoProject.Controller;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
class StudentController_deleteStudent_6bbb74f202_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private StudentServices studentServices;

    @Test
    void deleteStudent_existingStudent() throws Exception {
        // Given that a student with a valid _id exists in the database
        String existingId = "507f1f77bcf86cd799439011";
        doNothing().when(studentServices).deleteStudent(existingId);

        // When the deleteStudent method is called with the valid _id
        mockMvc.perform(delete("/students/{id}", existingId))

                // Then the student should be deleted from the database
                .andExpect(status().isOk());

        verify(studentServices, times(1)).deleteStudent(existingId);
    }

    @Test
    void deleteStudent_nonExistingStudent() throws Exception {
        // Given that a student with the provided _id does not exist in the database
        String nonExistingId = "507f1f77bcf86cd799439012";
        doNothing().when(studentServices).deleteStudent(nonExistingId);

        // When the deleteStudent method is called with the non-existing _id
        mockMvc.perform(delete("/students/{id}", nonExistingId))

                // Then an appropriate error message should be returned indicating that the student does not exist
                .andExpect(status().isNotFound());

        verify(studentServices, times(1)).deleteStudent(nonExistingId);
    }

    @Test
    void deleteStudent_emptyId() throws Exception {
        // Given that an empty string is provided as the _id
        String emptyId = "";

        // When the deleteStudent method is called with the empty _id
        mockMvc.perform(delete("/students/{id}", emptyId))

                // Then an appropriate error message should be returned indicating that the _id cannot be empty
                .andExpect(status().isBadRequest());

        verify(studentServices, times(0)).deleteStudent(anyString());
    }

    @Test
    void deleteStudent_nullId() throws Exception {
        // Given that a null value is provided as the _id
        String nullId = null;

        // When the deleteStudent method is called with the null _id
        mockMvc.perform(delete("/students/{id}", nullId))

                // Then an appropriate error message should be returned indicating that the _id cannot be null
                .andExpect(status().isBadRequest());

        verify(studentServices, times(0)).deleteStudent(anyString());
    }
}
