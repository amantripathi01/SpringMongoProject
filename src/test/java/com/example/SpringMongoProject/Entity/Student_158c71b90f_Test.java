/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Create a Student object with valid data**

* **Input:**
    * _id: "12345"
    * studentname: "John Doe"
    * studentaddress: "123 Main Street"
    * mobile: "0123456789"

* **Expected Output:**
    * A Student object with the specified values is created.

**Test Scenario 2: Create a Student object with an empty _id**

* **Input:**
    * _id: ""
    * studentname: "John Doe"
    * studentaddress: "123 Main Street"
    * mobile: "0123456789"

* **Expected Output:**
    * An exception is thrown indicating that the _id cannot be empty.

**Test Scenario 3: Create a Student object with a null studentname**

* **Input:**
    * _id: "12345"
    * studentname: null
    * studentaddress: "123 Main Street"
    * mobile: "0123456789"

* **Expected Output:**
    * An exception is thrown indicating that the studentname cannot be null.

**Test Scenario 4: Create a Student object with a null studentaddress**

* **Input:**
    * _id: "12345"
    * studentname: "John Doe"
    * studentaddress: null
    * mobile: "0123456789"

* **Expected Output:**
    * An exception is thrown indicating that the studentaddress cannot be null.

**Test Scenario 5: Create a Student object with a null mobile**

* **Input:**
    * _id: "12345"
    * studentname: "John Doe"
    * studentaddress: "123 Main Street"
    * mobile: null

* **Expected Output:**
    * An exception is thrown indicating that the mobile cannot be null.
*/
import com.example.SpringMongoProject.Entity.Student;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
public class Student_158c71b90f_Test {

    @Test
    public void testCreateStudentWithValidData() {
        // Arrange
        String _id = "12345";
        String studentname = "John Doe";
        String studentaddress = "123 Main Street";
        String mobile = "0123456789";

        // Act
        Student student = new Student(_id, studentname, studentaddress, mobile);

        // Assert
        assertEquals(_id, student.get_id());
        assertEquals(studentname, student.getStudentname());
        assertEquals(studentaddress, student.getStudentaddress());
        assertEquals(mobile, student.getMobile());
    }

    @Test
    public void testCreateStudentWithEmptyId() {
        // Arrange
        String _id = "";
        String studentname = "John Doe";
        String studentaddress = "123 Main Street";
        String mobile = "0123456789";

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> new Student(_id, studentname, studentaddress, mobile));
    }

    @Test
    public void testCreateStudentWithNullStudentname() {
        // Arrange
        String _id = "12345";
        String studentname = null;
        String studentaddress = "123 Main Street";
        String mobile = "0123456789";

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> new Student(_id, studentname, studentaddress, mobile));
    }

    @Test
    public void testCreateStudentWithNullStudentaddress() {
        // Arrange
        String _id = "12345";
        String studentname = "John Doe";
        String studentaddress = null;
        String mobile = "0123456789";

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> new Student(_id, studentname, studentaddress, mobile));
    }

    @Test
    public void testCreateStudentWithNullMobile() {
        // Arrange
        String _id = "12345";
        String studentname = "John Doe";
        String studentaddress = "123 Main Street";
        String mobile = null;

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> new Student(_id, studentname, studentaddress, mobile));
    }
}
