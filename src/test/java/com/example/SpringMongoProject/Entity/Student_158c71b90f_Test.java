// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package com.example.SpringMongoProject.Entity;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest
public class Student_158c71b90f_Test {

    @Autowired
    private StudentService studentService;

    @MockBean
    private StudentRepository studentRepository;

    @BeforeEach
    public void setUp() {
        Student student = new Student("1", "John", "123 Street", "1234567890");
        when(studentRepository.findById("1")).thenReturn(Optional.of(student));
    }

    @Test
    public void testStudentCreation() {
        String _id = "1";
        String studentname = "John";
        String studentaddress = "123 Street";
        String mobile = "1234567890";
        Student student = studentService.createStudent(_id, studentname, studentaddress, mobile);
        assertEquals(_id, student.get_id());
        assertEquals(studentname, student.getStudentname());
        assertEquals(studentaddress, student.getStudentaddress());
        assertEquals(mobile, student.getMobile());
    }

    @Test
    public void testStudentCreationWithInvalidData() {
        String _id = "";
        String studentname = "";
        String studentaddress = "";
        String mobile = "";
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            studentService.createStudent(_id, studentname, studentaddress, mobile);
        });
        String expectedMessage = "Student data cannot be empty";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage));
    }
}
