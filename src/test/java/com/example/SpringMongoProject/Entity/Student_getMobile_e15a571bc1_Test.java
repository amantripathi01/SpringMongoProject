/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Valid Mobile Number**

Objective: To verify that the getMobile() method returns a valid mobile number when a valid mobile number is set.

Test Steps:

1. Create a User object with a valid mobile number, such as "0123456789".
2. Call the getMobile() method on the User object.
3. Assert that the returned mobile number is equal to the expected mobile number, "0123456789".

Expected Outcome: The test should pass, as the getMobile() method returns the expected mobile number.

**Test Scenario 2: Null Mobile Number**

Objective: To verify that the getMobile() method returns null when the mobile number is not set.

Test Steps:

1. Create a User object without setting the mobile number.
2. Call the getMobile() method on the User object.
3. Assert that the returned mobile number is null.

Expected Outcome: The test should pass, as the getMobile() method returns null when the mobile number is not set.

**Test Scenario 3: Invalid Mobile Number**

Objective: To verify that the getMobile() method throws an exception when an invalid mobile number is set.

Test Steps:

1. Create a User object with an invalid mobile number, such as "abc123".
2. Call the getMobile() method on the User object.
3. Assert that the getMobile() method throws an exception.

Expected Outcome: The test should fail, as the getMobile() method throws an exception when an invalid mobile number is set.
*/
import com.example.SpringMongoProject.Entity.Student;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
public class Student_getMobile_e15a571bc1_Test {

    @Test
    @DisplayName("Test Scenario 1: Valid Mobile Number")
    void testGetMobile_ValidMobileNumber() {
        // Create a Student object with a valid mobile number
        Student student = new Student("1", "John Doe", "123 Main Street", "0123456789");

        // Call the getMobile() method on the Student object
        String mobileNumber = student.getMobile();

        // Assert that the returned mobile number is equal to the expected mobile number
        assertEquals("0123456789", mobileNumber);
    }

    @Test
    @DisplayName("Test Scenario 2: Null Mobile Number")
    void testGetMobile_NullMobileNumber() {
        // Create a Student object without setting the mobile number
        Student student = new Student("1", "John Doe", "123 Main Street");

        // Call the getMobile() method on the Student object
        String mobileNumber = student.getMobile();

        // Assert that the returned mobile number is null
        assertNull(mobileNumber);
    }

    @Test
    @DisplayName("Test Scenario 3: Invalid Mobile Number")
    void testGetMobile_InvalidMobileNumber() {
        // Create a Student object with an invalid mobile number
        Student student = new Student("1", "John Doe", "123 Main Street", "abc123");

        // Call the getMobile() method on the Student object
        assertThrows(IllegalArgumentException.class, () -> student.getMobile());
    }
}
