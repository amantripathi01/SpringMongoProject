/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Valid ID**
- Given a valid ID
- When the `set_id` method is called with the valid ID
- Then the ID should be set correctly

**Test Scenario 2: Null ID**
- Given a null ID
- When the `set_id` method is called with the null ID
- Then an exception should be thrown

**Test Scenario 3: Empty ID**
- Given an empty ID
- When the `set_id` method is called with the empty ID
- Then an exception should be thrown

**Test Scenario 4: ID with spaces**
- Given an ID with spaces
- When the `set_id` method is called with the ID with spaces
- Then the ID should be set correctly with spaces trimmed

**Test Scenario 5: ID with special characters**
- Given an ID with special characters
- When the `set_id` method is called with the ID with special characters
- Then the ID should be set correctly with special characters
*/
import org.junit.jupiter.api.Test;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import static org.junit.jupiter.api.Assertions.*;

@Document
class Student_set_id_b8adefff49_Test {

    @Id
    private String _id;
    private String studentname;
    private String studentaddress;
    private String mobile;

    @Test
    public void test_set_id_with_valid_id() {
        String validId = "1234567890";
        Student student = new Student();
        student.set_id(validId);
        assertEquals(validId, student.get_id());
    }

    @Test
    public void test_set_id_with_null_id() {
        String nullId = null;
        Student student = new Student();
        assertThrows(IllegalArgumentException.class, () -> student.set_id(nullId));
    }

    @Test
    public void test_set_id_with_empty_id() {
        String emptyId = "";
        Student student = new Student();
        assertThrows(IllegalArgumentException.class, () -> student.set_id(emptyId));
    }

    @Test
    public void test_set_id_with_id_with_spaces() {
        String idWithSpaces = "123 456 7890";
        Student student = new Student();
        student.set_id(idWithSpaces);
        assertEquals("1234567890", student.get_id()); // Trims spaces
    }

    @Test
    public void test_set_id_with_id_with_special_characters() {
        String idWithSpecialCharacters = "123!@#456*7890";
        Student student = new Student();
        student.set_id(idWithSpecialCharacters);
        assertEquals("123!@#456*7890", student.get_id()); // Allows special characters
    }
}
