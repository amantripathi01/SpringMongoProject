// Test generated by RoostGPT for test gitlab using AI Type Open AI and AI Model gpt-4-1106-preview

package com.example.SpringMongoProject.Service;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Repo.StudentRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class StudentServices_getStudentByID_59fd5b1864_Test {

    @Mock
    private StudentRepo repo;

    @Autowired
    private StudentServices studentServices;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        studentServices = new StudentServices();
        studentServices.repo = this.repo;
    }

    @Test
    public void testGetStudentByID_Success() {
        String studentId = "12345"; // TODO: Replace with actual student ID
        Student expectedStudent = new Student();
        expectedStudent.setId(studentId);
        expectedStudent.setName("Test Student");
        when(repo.findById(studentId)).thenReturn(Optional.of(expectedStudent));

        Student actualStudent = studentServices.getStudentByID(studentId);

        assertNotNull(actualStudent, "The student should not be null");
        assertEquals(expectedStudent, actualStudent, "The expected student should match the actual student");
    }

    @Test
    public void testGetStudentByID_NotFound() {
        String studentId = "nonexistent"; // TODO: Replace with an ID that does not exist
        when(repo.findById(studentId)).thenReturn(Optional.empty());

        Exception exception = assertThrows(RuntimeException.class, () -> {
            studentServices.getStudentByID(studentId);
        });

        String expectedMessage = "No student found with id: " + studentId;
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage), "Exception message should contain the correct student ID");
    }
}
