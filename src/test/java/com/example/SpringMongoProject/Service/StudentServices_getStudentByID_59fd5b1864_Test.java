/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Valid Student ID**

**Test Objective:**
To verify that the method successfully retrieves a student record from the database when a valid student ID is provided.

**Preconditions:**
- A student with the specified student ID exists in the database.
- The database connection is established and functional.

**Test Steps:**
1. Call the `getStudentByID` method with a valid student ID.
2. Verify that the method returns a `Student` object with the expected data.
3. Verify that the method does not throw any exceptions.

**Expected Outcome:**
- The method should return a `Student` object with the expected data.
- The method should not throw any exceptions.

**Test Scenario 2: Invalid Student ID**

**Test Objective:**
To verify that the method returns `null` when an invalid student ID is provided.

**Preconditions:**
- The student with the specified student ID does not exist in the database.
- The database connection is established and functional.

**Test Steps:**
1. Call the `getStudentByID` method with an invalid student ID.
2. Verify that the method returns `null`.
3. Verify that the method does not throw any exceptions.

**Expected Outcome:**
- The method should return `null`.
- The method should not throw any exceptions.

**Test Scenario 3: Database Connection Error**

**Test Objective:**
To verify that the method throws a `RuntimeException` when there is a database connection error.

**Preconditions:**
- The database connection is not established or is not functional.

**Test Steps:**
1. Call the `getStudentByID` method with a valid student ID.
2. Verify that the method throws a `RuntimeException`.

**Expected Outcome:**
- The method should throw a `RuntimeException`.
*/
import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Repo.StudentRepo;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@SpringBootTest
public class StudentServices_getStudentByID_59fd5b1864_Test {

    @Autowired
    private StudentServices studentServices;

    @MockBean
    private StudentRepo studentRepo;

    @Test
    public void testGetStudentByID_ValidStudentID() {
        // Given
        String studentId = "12345";
        Student expectedStudent = new Student();
        expectedStudent.setId(studentId);
        expectedStudent.setName("John Doe");
        when(studentRepo.findById(studentId)).thenReturn(Optional.of(expectedStudent));

        // When
        Student actualStudent = studentServices.getStudentByID(studentId);

        // Then
        assertEquals(expectedStudent, actualStudent);
    }

    @Test
    public void testGetStudentByID_InvalidStudentID() {
        // Given
        String studentId = "99999";
        when(studentRepo.findById(studentId)).thenReturn(Optional.empty());

        // When
        Student actualStudent = studentServices.getStudentByID(studentId);

        // Then
        assertEquals(null, actualStudent);
    }

    @Test
    public void testGetStudentByID_DatabaseConnectionError() {
        // Given
        String studentId = "12345";
        when(studentRepo.findById(studentId)).thenThrow(new RuntimeException());

        // When
        RuntimeException exception = assertThrows(RuntimeException.class, () -> studentServices.getStudentByID(studentId));

        // Then
        assertEquals("Database connection error", exception.getMessage());
    }
}
