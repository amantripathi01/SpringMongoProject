// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package com.example.SpringMongoProject.Service;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Repo.StudentRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Optional;

@ExtendWith(MockitoExtension.class)
public class StudentServices_getStudentByID_59fd5b1864_Test {

    @InjectMocks
    StudentServices studentServices;

    @Mock
    StudentRepo studentRepo;

    Student student;

    @BeforeEach
    public void setup() {
        student = new Student();
        student.set_id("1");
        student.setStudentname("John");
        student.setStudentaddress("123 Street");
        student.setMobile("1234567890");
    }

    @Test
    public void testGetStudentByID_WhenStudentExists() {
        when(studentRepo.findById(anyString())).thenReturn(Optional.of(student));

        Student result = studentServices.getStudentByID("1");

        assertEquals(student, result);
        verify(studentRepo, times(1)).findById(anyString());
    }

    @Test
    public void testGetStudentByID_WhenStudentDoesNotExist() {
        when(studentRepo.findById(anyString())).thenReturn(Optional.empty());

        Exception exception = assertThrows(RuntimeException.class, () -> {
            studentServices.getStudentByID("2");
        });

        String expectedMessage = "No value present";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
        verify(studentRepo, times(1)).findById(anyString());
    }
}
