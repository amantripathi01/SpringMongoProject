/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. Scenario: Saving a new student
   Description: Test whether the saveorUpdate method can create a new student in the database. 
   Steps:
   - Create a new instance of the Student class
   - Call the saveorUpdate method with the new student
   - Verify that the student was added to the database

2. Scenario: Updating an existing student
   Description: Test whether the saveorUpdate method can update the details of an existing student in the database. 
   Steps:
   - Create and save a new instance of the Student class
   - Modify some details of the student instance
   - Call the saveorUpdate method with the modified student
   - Verify that the student's details were updated in the database

3. Scenario: Saving a student with null values
   Description: Test how the saveorUpdate method handles a student with null values. 
   Steps:
   - Create a new instance of the Student class with some or all null values
   - Call the saveorUpdate method with the student
   - Verify whether the method handles the null values correctly

4. Scenario: Saving a student with invalid values
   Description: Test how the saveorUpdate method handles a student with invalid values, such as a negative age or a name with special characters. 
   Steps:
   - Create a new instance of the Student class with some invalid values
   - Call the saveorUpdate method with the student
   - Verify whether the method handles the invalid values correctly

5. Scenario: Saving an empty student
   Description: Test how the saveorUpdate method handles an empty student. 
   Steps:
   - Create a new instance of the Student class without providing any values
   - Call the saveorUpdate method with the student
   - Verify whether the method handles the empty student correctly

6. Scenario: Saving or updating a student when the database is not available
   Description: Test how the saveorUpdate method handles the situation when the database is unavailable.
   Steps:
   - Make the database unavailable
   - Call the saveorUpdate method with any student
   - Verify whether the method handles the unavailable database correctly
*/
package com.example.SpringMongoProject.Service;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Repo.StudentRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class StudentServices_saveorUpdate_c0d5e798a5_Test {

    @Mock
    private StudentRepo repo;

    @InjectMocks
    private StudentServices studentServices;

    private Student student;

    @BeforeEach
    public void setUp() {
        student = new Student();
        student.set_id("1");
        student.setStudentName("John");
        student.setStudentAddress("123 Street");
        student.setMobile("1234567890");
    }

    @Test
    public void testSaveOrUpdate_NewStudent() {
        when(repo.save(any(Student.class))).thenReturn(student);

        studentServices.saveorUpdate(student);

        verify(repo, times(1)).save(student);
    }

    @Test
    public void testSaveOrUpdate_UpdateStudent() {
        when(repo.findById(any(String.class))).thenReturn(Optional.of(student));
        when(repo.save(any(Student.class))).thenReturn(student);

        student.setStudentName("Alex");
        studentServices.saveorUpdate(student);

        verify(repo, times(1)).save(student);
    }

    @Test
    public void testSaveOrUpdate_NullValues() {
        Student nullStudent = new Student();

        when(repo.save(any(Student.class))).thenReturn(nullStudent);

        studentServices.saveorUpdate(nullStudent);

        verify(repo, times(1)).save(nullStudent);
    }

    @Test
    public void testSaveOrUpdate_InvalidValues() {
        Student invalidStudent = new Student();
        invalidStudent.set_id("-1");
        invalidStudent.setStudentName("John#");
        invalidStudent.setStudentAddress("123# Street");
        invalidStudent.setMobile("12345678#0");

        when(repo.save(any(Student.class))).thenReturn(invalidStudent);

        studentServices.saveorUpdate(invalidStudent);

        verify(repo, times(1)).save(invalidStudent);
    }

    @Test
    public void testSaveOrUpdate_EmptyStudent() {
        Student emptyStudent = new Student();

        when(repo.save(any(Student.class))).thenReturn(emptyStudent);

        studentServices.saveorUpdate(emptyStudent);

        verify(repo, times(1)).save(emptyStudent);
    }

    @Test
    public void testSaveOrUpdate_DatabaseUnavailable() {
        when(repo.save(any(Student.class))).thenThrow(new RuntimeException("Database Unavailable"));

        try {
            studentServices.saveorUpdate(student);
        } catch (RuntimeException e) {
            verify(repo, times(1)).save(student);
        }
    }
}
