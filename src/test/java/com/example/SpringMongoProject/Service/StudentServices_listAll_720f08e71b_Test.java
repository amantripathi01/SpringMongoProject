/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Verify that the method returns all students in the database**

**Test Steps:**

1. Create a new Student object and save it to the database.
2. Call the listAll() method and verify that the returned list contains the newly created student.

**Expected Result:**

The listAll() method should return a list of all students in the database, including the newly created student.

**Test Scenario 2: Verify that the method returns an empty list if there are no students in the database**

**Test Steps:**

1. Delete all students from the database.
2. Call the listAll() method and verify that the returned list is empty.

**Expected Result:**

The listAll() method should return an empty list if there are no students in the database.

**Test Scenario 3: Verify that the method throws an exception if the database is unavailable**

**Test Steps:**

1. Simulate a database outage by stopping the database server.
2. Call the listAll() method and verify that it throws an exception.

**Expected Result:**

The listAll() method should throw an exception if the database is unavailable.
*/
import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Repo.StudentRepo;
import com.example.SpringMongoProject.Service.StudentServices;
import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@SpringBootTest
public class StudentServices_listAll_720f08e71b_Test {

    @InjectMocks
    private StudentServices studentServices;

    @Mock
    private StudentRepo studentRepo;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testListAll_withStudentsInDatabase() {
        // Create a new Student object and save it to the database
        Student student = new Student();
        student.setName("John Doe");
        student.setAge(21);
        when(studentRepo.save(student)).thenReturn(student);

        // Call the listAll() method and verify that the returned list contains the newly created student
        List<Student> students = new ArrayList<>();
        students.add(student);
        when(studentRepo.findAll()).thenReturn(students);

        Iterable<Student> result = studentServices.listAll();

        assertEquals(1, result.spliterator().getExactSizeIfKnown());
        assertEquals(student, result.iterator().next());
    }

    @Test
    public void testListAll_withNoStudentsInDatabase() {
        // Delete all students from the database
        studentRepo.deleteAll();

        // Call the listAll() method and verify that the returned list is empty
        when(studentRepo.findAll()).thenReturn(new ArrayList<>());

        Iterable<Student> result = studentServices.listAll();

        assertEquals(0, result.spliterator().getExactSizeIfKnown());
    }

    @Test
    public void testListAll_withDatabaseUnavailable() {
        // Simulate a database outage by throwing an exception
        when(studentRepo.findAll()).thenThrow(new RuntimeException());

        // Call the listAll() method and verify that it throws an exception
        assertThrows(RuntimeException.class, () -> studentServices.listAll());
    }
}
