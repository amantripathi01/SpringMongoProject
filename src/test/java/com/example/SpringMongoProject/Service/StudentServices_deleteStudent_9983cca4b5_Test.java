// Test generated by RoostGPT for test gitlab using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Delete a student with a valid student ID.
   - Given a valid student ID that exists in the database.
   - When the deleteStudent function is called with the given ID.
   - Then the student with the given ID should be deleted from the database.

2. Scenario: Delete a student with an invalid student ID.
   - Given an invalid student ID that doesn't exist in the database.
   - When the deleteStudent function is called with the given ID.
   - Then the function should throw an exception or error.

3. Scenario: Delete a student with a null student ID.
   - Given a null student ID.
   - When the deleteStudent function is called with the given ID.
   - Then the function should throw an exception or error.

4. Scenario: Delete a student with an empty student ID.
   - Given an empty student ID.
   - When the deleteStudent function is called with the given ID.
   - Then the function should throw an exception or error.

5. Scenario: Delete a student twice with the same ID.
   - Given a valid student ID that exists in the database.
   - When the deleteStudent function is called twice with the same ID.
   - Then the first call should delete the student, and the second call should throw an exception or error.

6. Scenario: Delete a student and then search for the deleted student.
   - Given a valid student ID that exists in the database.
   - When the deleteStudent function is called with the given ID and then the search function is called with the same ID.
   - Then the student should not be found in the database.

7. Scenario: Delete a student and then check the total number of students.
   - Given a valid student ID that exists in the database and the total number of students before deletion.
   - When the deleteStudent function is called with the given ID and then the total number of students is checked.
   - Then the total number of students should be one less than before.
*/
package com.example.SpringMongoProject.Service;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Repo.StudentRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.anyString;

@ExtendWith(MockitoExtension.class)
public class StudentServices_deleteStudent_9983cca4b5_Test {

    @Mock
    private StudentRepo repo;

    @InjectMocks
    private StudentServices studentServices;

    @BeforeEach
    void setUp() {
        Student student = new Student();
        student.setId("1");
        Mockito.when(repo.findById("1")).thenReturn(Optional.of(student));
        Mockito.when(repo.findById("2")).thenReturn(Optional.empty());
    }

    @Test
    public void testDeleteStudentWithValidId() {
        studentServices.deleteStudent("1");
        Mockito.verify(repo, Mockito.times(1)).deleteById("1");
    }

    @Test
    public void testDeleteStudentWithInvalidId() {
        try {
            studentServices.deleteStudent("2");
        } catch (Exception e) {
            assert(e instanceof IllegalArgumentException);
        }
        Mockito.verify(repo, Mockito.times(0)).deleteById(anyString());
    }

    @Test
    public void testDeleteStudentWithNullId() {
        try {
            studentServices.deleteStudent(null);
        } catch (Exception e) {
            assert(e instanceof IllegalArgumentException);
        }
        Mockito.verify(repo, Mockito.times(0)).deleteById(anyString());
    }

    @Test
    public void testDeleteStudentWithEmptyId() {
        try {
            studentServices.deleteStudent("");
        } catch (Exception e) {
            assert(e instanceof IllegalArgumentException);
        }
        Mockito.verify(repo, Mockito.times(0)).deleteById(anyString());
    }

    @Test
    public void testDeleteStudentTwiceWithSameId() {
        studentServices.deleteStudent("1");
        try {
            studentServices.deleteStudent("1");
        } catch (Exception e) {
            assert(e instanceof IllegalArgumentException);
        }
        Mockito.verify(repo, Mockito.times(1)).deleteById("1");
    }

    @Test
    public void testDeleteStudentAndThenSearchForDeletedStudent() {
        studentServices.deleteStudent("1");
        try {
            studentServices.getStudentByID("1");
        } catch (Exception e) {
            assert(e instanceof IllegalArgumentException);
        }
        Mockito.verify(repo, Mockito.times(1)).deleteById("1");
    }

    @Test
    public void testDeleteStudentAndCheckTotalNumberOfStudents() {
        int initialCount = studentServices.listAll().size();
        studentServices.deleteStudent("1");
        int finalCount = studentServices.listAll().size();
        assert(initialCount - 1 == finalCount);
        Mockito.verify(repo, Mockito.times(1)).deleteById("1");
    }
}
