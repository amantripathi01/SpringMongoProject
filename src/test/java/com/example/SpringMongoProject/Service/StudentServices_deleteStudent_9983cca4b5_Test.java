/*
Test generated by RoostGPT for test aman321 using AI Type Vertex AI and AI Model text-bison

 **Test Scenario 1: Delete existing student**
* Given a student exists in the database
* When the deleteStudent method is called with the student's id
* Then the student is deleted from the database

**Test Scenario 2: Delete non-existing student**
* Given a student does not exist in the database
* When the deleteStudent method is called with the student's id
* Then no student is deleted from the database

**Test Scenario 3: Delete student with null id**
* Given the student's id is null
* When the deleteStudent method is called with the null id
* Then an exception is thrown
*/
package com.example.SpringMongoProject.Service;

import com.example.SpringMongoProject.Entity.Student;
import com.example.SpringMongoProject.Repo.StudentRepo;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

@SpringBootTest
public class StudentServices_deleteStudent_9983cca4b5_Test {

    @Autowired
    private StudentServices studentServices;

    @MockBean
    private StudentRepo repo;

    @Test
    public void testDeleteExistingStudent() {
        // Given a student exists in the database
        Student student = new Student("1", "John Doe", "123 Main Street", "john.doe@example.com");
        when(repo.findById("1")).thenReturn(Optional.of(student));

        // When the deleteStudent method is called with the student's id
        studentServices.deleteStudent("1");

        // Then the student is deleted from the database
        assertEquals(0, repo.findAll().size());
    }

    @Test
    public void testDeleteNonExistingStudent() {
        // Given a student does not exist in the database
        when(repo.findById("2")).thenReturn(Optional.empty());

        // When the deleteStudent method is called with the student's id
        studentServices.deleteStudent("2");

        // Then no student is deleted from the database
        assertEquals(0, repo.findAll().size());
    }

    @Test
    public void testDeleteStudentWithNullId() {
        // Given the student's id is null
        String id = null;

        // When the deleteStudent method is called with the null id
        assertThrows(IllegalArgumentException.class, () -> studentServices.deleteStudent(id));

        // Then an exception is thrown
    }
}
